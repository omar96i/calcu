<?php

namespace App\Livewire;

use App\Models\Axy;
use App\Models\GeneralData;
use App\Models\Axy_hi_mv;
use App\Models\Axy_hv_mi;
use App\Models\Dxy;
use App\Models\Fach_inv;
use App\Models\Facm_inv;
use App\Models\Study;
use App\Models\Table;
use Carbon\Carbon;
use DateTime;
use Livewire\Component;
use Livewire\WithPagination;

class StudiesTable extends Component
{

    public int | string $perPage = 500;

    use WithPagination;

    public $fecha_calculo = '2023';

    public $fecha_calculo2 = '2023-01-01';

    public $parametrosd17 = 0;

    public $smmlv = 1160000;

    public $K_ = 0.04;

    public $j = 0.11064;

    public $js = 0.05387;

    public $jm = 0.00878;

    public $i = 0.06793;

    public $TTM = 0.0054917;

    public $recalcular;

    public $report_type = 'normal';

    public function mount($fecha, $parametro = false, $smmlv = false, $k = false, $j = false, $js = false, $jm = false, $i = false, $ttm = false, $recalcular, $fecha_calculo2, $report_type){
        $this->fecha_calculo = $fecha;
        $this->report_type = $report_type;
        if($recalcular == 'SI'){
            $this->parametrosd17 = $parametro;
            $this->smmlv = $smmlv;
            $this->K_ = $k;
            $this->j = $j;
            $this->js = $js;
            $this->jm = $jm;
            $this->i = $i;
            $this->TTM = $ttm;
            $this->fecha_calculo2 = $fecha_calculo2;
        }

        $this->recalcular = $recalcular;
    }

    public function render()
    {
        $data = Study::with('actuarial_group')
        ->where('year', $this->fecha_calculo)
        ->where('report_type', $this->report_type)
        ->where('user_id', auth()->user()->id)
        ->paginate($this->perPage);
        return view('livewire.studies-table', ['data' => $data]);
    }

    public $fac_hom = [
        [15, 373.142, 169.4628, 5709080.91, 10006.1950, 15.3000, 14.3000, 15.0389, 14.7030, 14.4604, 13.7500, 209.8722, 194.7662, 0.0268, 15.1060],
        [16, 349.238, 162.2828, 5335938.78, 9836.7322, 15.2788, 14.2788, 15.0172, 14.6816, 14.4396, 13.7296, 209.5700, 194.4856, 0.0282, 15.0844],
        [17, 326.862, 155.9434, 4986700.46, 9674.4494, 15.2563, 14.2563, 14.9943, 14.6588, 14.4176, 13.7080, 209.2494, 194.1880, 0.0296, 15.0614],
        [18, 305.916, 149.7538, 4659838.32, 9518.5060, 15.2324, 14.2324, 14.9700, 14.6348, 14.3943, 13.6850, 208.9098, 193.8728, 0.0311, 15.0371],
        [19, 286.308, 144.2580, 4353922.76, 9368.7522, 15.2072, 14.2072, 14.9443, 14.6092, 14.3695, 13.6607, 208.5499, 193.5386, 0.0327, 15.0113],
        [20, 267.952, 139.1070, 4067615.24, 9224.4942, 15.1804, 14.1804, 14.9170, 14.5822, 14.3433, 13.6350, 208.1686, 193.1846, 0.0344, 14.9840],
        [21, 250.770, 134.4988, 3799663.07, 9085.3871, 15.1520, 14.1520, 14.8881, 14.5535, 14.3155, 13.6077, 207.7647, 192.8096, 0.0362, 14.9551],
        [22, 234.684, 130.3551, 3548893.56, 8950.8883, 15.1220, 14.1220, 14.8576, 14.5232, 14.2861, 13.5788, 207.3371, 192.4126, 0.0381, 14.9244],
        [23, 219.627, 126.4009, 3314209.17, 8820.5332, 15.0902, 14.0902, 14.8252, 14.4911, 14.2550, 13.5483, 206.8845, 191.9925, 0.0402, 14.8920],
        [24, 205.530, 123.0026, 3094582.65, 8694.1323, 15.0566, 14.0566, 14.7909, 14.4571, 14.2221, 13.5159, 206.4055, 191.5478, 0.0423, 14.8577],
        [25, 192.334, 119.8874, 2889052.25, 8571.1297, 15.0210, 14.0210, 14.7547, 14.4212, 14.1872, 13.4817, 205.8990, 191.0776, 0.0446, 14.8214],
        [26, 179.981, 117.0100, 2696717.97, 8451.2423, 14.9834, 13.9834, 14.7164, 14.3832, 14.1504, 13.4456, 205.3633, 190.5803, 0.0470, 14.7830],
        [27, 168.416, 114.4899, 2516737.33, 8334.2324, 14.9436, 13.9436, 14.6759, 14.3430, 14.1114, 13.4073, 204.7970, 190.0545, 0.0495, 14.7425],
        [28, 157.589, 112.2632, 2348321.68, 8219.7424, 14.9016, 13.9016, 14.6331, 14.3006, 14.0703, 13.3669, 204.1985, 189.4989, 0.0522, 14.6996],
        [29, 147.453, 110.2742, 2190732.88, 8107.4793, 14.8572, 13.8572, 14.5879, 14.2558, 14.0268, 13.3242, 203.5662, 188.9119, 0.0550, 14.6543],
        [30, 137.964, 108.4751, 2043280.06, 7997.2051, 14.8103, 13.8103, 14.5401, 14.2084, 13.9809, 13.2791, 202.8985, 188.2920, 0.0580, 14.6065],
        [31, 129.080, 107.0692, 1905316.50, 7888.7300, 14.7608, 13.7608, 14.4897, 14.1584, 13.9324, 13.2315, 202.1935, 187.6375, 0.0611, 14.5560],
        [32, 120.762, 105.8606, 1776236.83, 7781.6607, 14.7085, 13.7085, 14.4365, 14.1056, 13.8813, 13.1813, 201.4496, 186.9469, 0.0644, 14.5027],
        [33, 112.975, 104.8008, 1655474.56, 7675.8001, 14.6534, 13.6534, 14.3804, 14.0500, 13.8273, 13.1283, 200.6650, 186.2185, 0.0679, 14.4465],
        [34, 105.684, 104.0489, 1542499.45, 7570.9994, 14.5953, 13.5953, 14.3213, 13.9913, 13.7704, 13.0724, 199.8377, 185.4505, 0.0716, 14.3873],
        [35, 98.858, 103.4379, 1436815.11, 7466.9505, 14.5341, 13.5341, 14.2589, 13.9295, 13.7105, 13.0136, 198.9659, 184.6411, 0.0755, 14.3248],
        [36, 92.467, 103.0111, 1337957.05, 7363.5125, 14.4696, 13.4696, 14.1932, 13.8643, 13.6473, 12.9516, 198.0475, 183.7885, 0.0796, 14.2590],
        [37, 86.482, 102.7963, 1245490.48, 7260.5014, 14.4017, 13.4017, 14.1241, 13.7957, 13.5808, 12.8863, 197.0805, 182.8907, 0.0840, 14.1898],
        [38, 80.878, 102.7314, 1159008.40, 7157.7051, 14.3303, 13.3303, 14.0513, 13.7236, 13.5109, 12.8176, 196.0628, 181.9459, 0.0885, 14.1169],
        [39, 75.631, 102.7641, 1078129.97, 7054.9737, 14.2551, 13.2551, 13.9748, 13.6476, 13.4373, 12.7453, 194.9923, 180.9521, 0.0933, 14.0402],
        [40, 70.718, 103.0527, 1002498.68, 6952.2096, 14.1760, 13.1760, 13.8943, 13.5678, 13.3599, 12.6693, 193.8667, 179.9071, 0.0983, 13.9596],
        [41, 66.117, 103.4584, 931780.81, 6849.1569, 14.0930, 13.0930, 13.8097, 13.4839, 13.2785, 12.5894, 192.6840, 178.8091, 0.1036, 13.8748],
        [42, 61.808, 103.9880, 865664.13, 6745.6985, 14.0058, 13.0058, 13.7209, 13.3958, 13.1931, 12.5055, 191.4419, 177.6560, 0.1091, 13.7859],
        [43, 57.772, 104.6421, 803856.37, 6641.7104, 13.9142, 12.9142, 13.6276, 13.3033, 13.1035, 12.4175, 190.1382, 176.4457, 0.1150, 13.6925],
        [44, 53.993, 105.4676, 746083.99, 6537.0684, 13.8182, 12.8182, 13.5298, 13.2063, 13.0094, 12.3251, 188.7705, 175.1760, 0.1211, 13.5945],
        [45, 50.453, 106.3485, 692090.96, 6431.6008, 13.7175, 12.7175, 13.4273, 13.1046, 12.9109, 12.2283, 187.3368, 173.8450, 0.1275, 13.4918],
        [46, 47.138, 107.4195, 641637.72, 6325.2523, 13.6120, 12.6120, 13.3199, 12.9981, 12.8076, 12.1269, 185.8346, 172.4504, 0.1342, 13.3842],
        [47, 44.032, 108.5213, 594500.00, 6217.8328, 13.5015, 12.5015, 13.2074, 12.8866, 12.6994, 12.0207, 184.2619, 170.9903, 0.1412, 13.2716],
        [48, 41.123, 109.7672, 550467.97, 6109.3115, 13.3860, 12.3860, 13.0897, 12.7698, 12.5863, 11.9096, 182.6161, 169.4624, 0.1486, 13.1537],
        [49, 38.397, 111.1263, 509345.19, 5999.5443, 13.2651, 12.2651, 12.9666, 12.6478, 12.4679, 11.7934, 180.8953, 167.8649, 0.1562, 13.0304],
        [50, 35.844, 112.5339, 470947.87, 5888.4180, 13.1389, 12.1389, 12.8381, 12.5203, 12.3443, 11.6720, 179.0975, 166.1958, 0.1643, 12.9016],
        [51, 33.451, 114.0343, 435.104, 5.7758841, 13.0070, 12.0070, 12.7038, 12.3871, 12.2152, 11.5452, 177.2202, 164.4531, 0.1727, 12.7672],
        [52, 31.210, 115.6256, 401.65257, 5.6618498, 12.8695, 11.8695, 12.5638, 12.2482, 12.0805, 11.4130, 175.2616, 162.6348, 0.1814, 12.6269],
        [53, 29.109, 117.2433, 370.44292, 5.5462241, 12.7261, 11.7261, 12.4178, 12.1034, 11.9402, 11.2751, 173.2198, 160.7392, 0.1905, 12.4806],
        [54, 27.140, 118.9684, 341.33403, 5.4289808, 12.5767, 11.5767, 12.2656, 11.9525, 11.7939, 11.1315, 171.0927, 158.7644, 0.2000, 12.3283],
        [55, 25.295, 119.6214, 314.19391, 5.3100124, 12.4213, 11.4213, 12.1073, 11.7955, 11.6416, 10.9820, 168.8787, 156.7090, 0.2099, 12.1697],
        [56, 23.566, 120.5600, 288.89905, 5.1903911, 12.2590, 11.2590, 11.9421, 11.6316, 11.4828, 10.8259, 166.5679, 154.5638, 0.2202, 12.0042],
        [57, 21.947, 121.7575, 265.33274, 5.0698311, 12.0898, 11.0898, 11.7698, 11.4607, 11.3171, 10.6633, 164.1591, 152.3275, 0.2310, 11.8316],
        [58, 20.429, 123.2258, 243.38596, 4.9480736, 11.9137, 10.9137, 11.5905, 11.2829, 11.1447, 10.4940, 161.6513, 149.9993, 0.2422, 11.6520],
        [59, 19.006, 124.9260, 222.95691, 4.8248478, 11.7306, 10.7306, 11.4040, 11.0979, 10.9654, 10.3179, 159.0440, 147.5788, 0.2539, 11.4652],
        [60, 17.673, 126.8552, 203.95050, 4.6999218, 11.5405, 10.5405, 11.2104, 10.9059, 10.7793, 10.1351, 156.3371, 145.0658, 0.2659, 11.2713],
        [61, 16.422, 128.9855, 186.27795, 4.5730666, 11.3435, 10.3435, 11.0098, 10.7069, 10.5863, 9.9456, 153.5311, 142.4607, 0.2785, 11.0703],
        [62, 15.248, 131.3185, 169.85636, 4.4440811, 11.1395, 10.1395, 10.8021, 10.5009, 10.3866, 9.7495, 150.6267, 139.7644, 0.2915, 10.8623],
        [63, 14.147, 136.1417, 154.60827, 4.3127625, 10.9288, 9.9288, 10.5875, 10.2881, 10.1803, 9.5469, 147.6259, 136.9785, 0.3049, 10.6474],
        [64, 13.111, 140.6575, 140.46138, 4.1766208, 10.7133, 9.7133, 10.3681, 10.0705, 9.9693, 9.3397, 144.5577, 134.1301, 0.3186, 10.4276],
        [65, 12.136, 144.8060, 127.35047, 4.0359633, 10.4933, 9.4933, 10.1441, 9.8483, 9.7539, 9.1282, 141.4252, 131.2220, 0.3326, 10.2032],
        [66, 11.220, 148.6042, 115.21416, 3.8911572, 10.2691, 9.2691, 9.9157, 9.6217, 9.5343, 8.9125, 138.2313, 128.2569, 0.3468, 9.9744],
        [67, 10.357, 152.0095, 103.99461, 3.7425530, 10.0407, 9.0407, 9.6831, 9.3911, 9.3107, 8.6930, 134.9795, 125.2380, 0.3613, 9.7415],
        [68, 9.547, 155.0134, 93.63730, 3.5905435, 9.8085, 8.8085, 9.4467, 9.1566, 9.0834, 8.4698, 131.6736, 122.1689, 0.3761, 9.5047],
        [69, 8.784, 157.5829, 84.09079, 3.4355301, 9.5729, 8.5729, 9.2067, 8.9186, 8.8526, 8.2432, 128.3179, 119.0535, 0.3911, 9.2643],
        [70, 8.068, 159.6877, 75.30652, 3.2779472, 9.3340, 8.3340, 8.9635, 8.6774, 8.6187, 8.0135, 124.9167, 115.8960, 0.4063, 9.0207],
        [71, 7.395, 161.3188, 67.23858, 3.1182595, 9.0923, 8.0923, 8.7174, 8.4333, 8.3821, 7.7811, 121.4748, 112.7006, 0.4217, 8.7742],
        [72, 6.763, 162.4263, 59.84349, 2.9569407, 8.8482, 7.8482, 8.4687, 8.1866, 8.1430, 7.5463, 117.9977, 109.4726, 0.4372, 8.5251],
        [73, 6.171, 162.9876, 53.08010, 2.7945144, 8.6019, 7.6019, 8.2179, 7.9379, 7.9018, 7.3095, 114.4906, 106.2167, 0.4529, 8.2739],
        [74, 5.615, 162.9794, 46.90934, 2.6315268, 8.3539, 7.3539, 7.9654, 7.6874, 7.6590, 7.0710, 110.9592, 102.9383, 0.4686, 8.0210],
        [75, 5.095, 162.3670, 41.29406, 2.4685474, 8.1046, 7.1046, 7.7115, 7.4357, 7.4149, 6.8314, 107.4098, 99.6430, 0.4845, 7.7667],
        [76, 4.609, 161.1224, 36.19893, 2.3061804, 7.8545, 6.8545, 7.4569, 7.1831, 7.1700, 6.5909, 103.8483, 96.3367, 0.5004, 7.5116],
        [77, 4.154, 159.2248, 31.59026, 2.1450580, 7.6040, 6.6040, 7.2018, 6.9301, 6.9248, 6.3500, 100.2814, 93.0253, 0.5163, 7.2561],
        [78, 3.731, 156.6609, 27.43585, 1.9858332, 7.3536, 6.3536, 6.9468, 6.6771, 6.6796, 6.1092, 96.7154, 89.7147, 0.5323, 7.0007],
        [79, 3.337, 153.4040, 23.70491, 1.8291723, 7.1037, 6.1037, 6.6923, 6.4248, 6.4349, 5.8690, 93.1572, 86.4114, 0.5482, 6.7458],
        [80, 2.971, 149.4497, 20.36794, 1.6757683, 6.8549, 5.8549, 6.4389, 6.1734, 6.1912, 5.6297, 89.6135, 83.1215, 0.5640, 6.4920],
        [81, 2.633, 144.8069, 17.39664, 1.5263187, 6.6075, 5.6075, 6.1870, 5.9236, 5.9490, 5.3918, 86.0908, 79.8512, 0.5797, 6.2397],
        [82, 2.321, 139.4789, 14.76378, 1.3815117, 6.3621, 5.3621, 5.9371, 5.6757, 5.7087, 5.1559, 82.5961, 76.6068, 0.5953, 5.9893],
        [83, 2.034, 133.4940, 12.44319, 1.2420329, 6.1191, 5.1191, 5.6896, 5.4303, 5.4708, 4.9222, 79.1358, 73.3944, 0.6108, 5.7415],
        [84, 1.771, 126.8813, 10.40969, 1.1085389, 5.8790, 4.8790, 5.4451, 5.1878, 5.2357, 4.6913, 75.7165, 70.2200, 0.6261, 5.4965],
        [85, 1.531, 119.6955, 8.63902, 0.9816576, 5.6422, 4.6422, 5.2039, 4.9486, 5.0038, 4.4636, 72.3442, 67.0892, 0.6411, 5.2550],
        [86, 1.314, 112.0032, 7.10786, 0.8619621, 5.4090, 4.4090, 4.9665, 4.7131, 4.7755, 4.2395, 69.0248, 64.0076, 0.6559, 5.0172],
        [87, 1.118, 103.8816, 5.79379, 0.7499590, 5.1800, 4.1800, 4.7333, 4.4818, 4.5513, 4.0193, 65.7638, 60.9802, 0.6705, 4.7836],
        [88, 943, 95.4234, 4.67531, 0.6460774, 4.9555, 3.9555, 4.5047, 4.2551, 4.3314, 3.8034, 62.5663, 58.0117, 0.6848, 4.5546],
        [89, 788, 86.7436, 3.73185, 0.5506540, 4.7357, 3.7357, 4.2809, 4.0331, 4.1162, 3.5920, 59.4364, 55.1060, 0.6988, 4.3304],
        [90, 651, 77.9605, 2.94383, 0.4639104, 4.5209, 3.5209, 4.0621, 3.8161, 3.9059, 3.3855, 56.3778, 52.2665, 0.7124, 4.1113],
        [91, 532, 69.2030, 2.29267, 0.3859498, 4.3113, 3.3113, 3.8487, 3.6044, 3.7007, 3.1840, 53.3932, 49.4956, 0.7258, 3.8975],
        [92, 429, 60.6014, 1.76089, 0.3167469, 4.1070, 3.1070, 3.6406, 3.3981, 3.5006, 2.9875, 50.4840, 46.7948, 0.7388, 3.6892],
        [93, 341, 52.2952, 1.33214, 0.2561455, 3.9080, 2.9080, 3.4379, 3.1970, 3.3057, 2.7961, 47.6493, 44.1632, 0.7514, 3.4861],
        [94, 267, 44.4061, 0.99126, 0.2038502, 3.7140, 2.7140, 3.2404, 3.0011, 3.1158, 2.6096, 44.8868, 41.5986, 0.7638, 3.2882],
        [95, 206, 37.0542, 0.72436, 0.1594441, 3.5245, 2.5245, 3.0475, 2.8098, 2.9303, 2.4275, 42.1896, 39.0945, 0.7758, 3.0950],
        [96, 155, 30.3965, 0.51884, 0.1223900, 3.3389, 2.3389, 2.8585, 2.6223, 2.7485, 2.2490, 39.5463, 36.6406, 0.7876, 2.9057],
        [97, 115, 24.4918, 0.36345, 0.0919934, 3.1574, 2.1574, 2.6736, 2.4389, 2.5708, 2.0744, 36.9610, 34.2405, 0.7992, 2.7205],
        [98, 83, 19.3049, 0.24834, 0.0675016, 2.9813, 1.9813, 2.4943, 2.2611, 2.3984, 1.9051, 34.4542, 31.9132, 0.8104, 2.5410],
        [99, 59, 14.8256, 0.16504, 0.0481968, 2.8119, 1.8119, 2.3217, 2.0900, 2.2324, 1.7422, 32.0408, 29.6727, 0.8211, 2.3681],
        [100, 40, 11.0476, 0.10635, 0.0333712, 2.6497, 1.6497, 2.1566, 1.9262, 2.0736, 1.5862, 29.7313, 27.5286, 0.8315, 2.2027],
        [101, 27, 7.9540, 66.21, 22.3236, 2.4952, 1.4952, 1.9993, 1.7702, 1.9224, 1.4377, 27.5318, 25.4867, 0.8413, 2.0451],
        [102, 17, 5.5091, 39.68, 14.3695, 2.3486, 1.3486, 1.8500, 1.6221, 1.7788, 1.2967, 25.4442, 23.5486, 0.8506, 1.8956],
        [103, 10, 3.6518, 22.78, 8.8604, 2.2098, 1.2098, 1.7087, 1.4819, 1.6430, 1.1633, 23.4679, 21.7139, 0.8594, 1.7540],
        [104, 6, 2.3065, 12.47, 5.2087, 2.0781, 1.0781, 1.5745, 1.3489, 1.5140, 1.0366, 21.5920, 19.9724, 0.8678, 1.6197],
        [105, 3, 1.3789, 6.47, 2.9021, 1.9527, 0.9527, 1.4468, 1.2222, 1.3912, 0.9161, 19.8064, 18.3147, 0.8758, 1.4918],
        [106, 2, 0.7754, 3.16, 1.5233, 1.8311, 0.8311, 1.3230, 1.0994, 1.2721, 0.7992, 18.0752, 16.7074, 0.8835, 1.3677],
        [107, 1, 0.4069, 1.43, 0.7479, 1.7079, 0.7079, 1.1975, 0.9750, 1.1515, 0.6807, 16.3203, 15.0783, 0.8914, 1.2420],
        [108, 0, 0.1982, 0.59, 0.3410, 1.5681, 0.5681, 1.0551, 0.8337, 1.0146, 0.5462, 14.3293, 13.2299, 0.9003, 1.0994],
        [109, 0, 0.0877, 0.22, 0.1427, 1.3755, 0.3755, 0.8590, 0.6392, 0.8260, 0.3610, 11.5869, 10.6839, 0.9125, 0.9030],
        [110, 0, 0.0550, 0.06, 0.0550, 1.0000, 0.0000, 0.4767, 0.2600, 0.4583, 0.0000, 6.2400, 5.7200, 0.9364, 0.5200]
    ];

    public $fac_muj = [
        [15, 373.142, 95.0389, 5759625.62, 6791.2119, 15.4355, 14.4355, 15.1768, 14.8398, 14.5931, 13.8803, 211.8011, 196.5570, 0.0182, 15.2442],
        [16, 349.313, 90.9569, 5386483.48, 6696.1729, 15.4202, 14.4202, 15.1613, 14.8244, 14.5781, 13.8656, 211.5841, 196.3555, 0.0192, 15.2286],
        [17, 327.003, 87.3160, 5037170.74, 6605.2160, 15.4040, 14.4040, 15.1448, 14.8081, 14.5623, 13.8500, 211.3536, 196.1415, 0.0202, 15.2121],
        [18, 306.116, 84.0572, 4710167.59, 6517.9000, 15.3869, 14.3869, 15.1273, 14.7907, 14.5455, 13.8335, 211.1089, 195.9143, 0.0213, 15.1946],
        [19, 286.561, 81.1284, 4404051.35, 6433.8428, 15.3686, 14.3686, 15.1087, 14.7723, 14.5276, 13.8160, 210.8493, 195.6733, 0.0225, 15.1760],
        [20, 268.253, 78.2320, 4117490.23, 6352.7144, 15.3493, 14.3493, 15.0890, 14.7528, 14.5087, 13.7974, 210.5739, 195.4176, 0.0237, 15.1563],
        [21, 251.112, 75.6114, 3849237.45, 6274.4824, 15.3288, 14.3288, 15.0681, 14.7321, 14.4886, 13.7777, 210.2818, 195.1464, 0.0250, 15.1354],
        [22, 235.064, 73.2283, 3598125.58, 6198.8710, 15.3070, 14.3070, 15.0460, 14.7101, 14.4673, 13.7567, 209.9719, 194.8587, 0.0264, 15.1132],
        [23, 220.039, 71.0489, 3363061.72, 6125.6428, 15.2839, 14.2839, 15.0225, 14.6868, 14.4447, 13.7346, 209.6432, 194.5536, 0.0278, 15.0896],
        [24, 205.972, 69.0439, 3143022.74, 6054.5939, 15.2595, 14.2595, 14.9976, 14.6621, 14.4207, 13.7110, 209.2948, 194.2302, 0.0294, 15.0647],
        [25, 192.802, 67.3687, 2937050.76, 5985.5500, 15.2335, 14.2335, 14.9711, 14.6359, 14.3953, 13.6861, 208.9255, 193.8873, 0.0310, 15.0382],
        [26, 180.471, 65.7969, 2744249.03, 5918.1812, 15.2060, 14.2060, 14.9432, 14.6081, 14.3684, 13.6597, 208.5341, 193.5240, 0.0328, 15.0102],
        [27, 168.926, 64.3113, 2563778.16, 5852.3843, 15.1769, 14.1769, 14.9135, 14.5787, 14.3399, 13.6317, 208.1196, 193.1391, 0.0346, 14.9805],
        [28, 158.117, 63.1945, 2394852.24, 5788.0731, 15.1461, 14.1461, 14.8821, 14.5476, 14.3097, 13.6020, 207.6804, 192.7314, 0.0366, 14.9490],
        [29, 147.996, 62.0988, 2236735.46, 5724.8786, 15.1135, 14.1135, 14.8489, 14.5146, 14.2778, 13.5706, 207.2156, 192.2999, 0.0387, 14.9157],
        [30, 138.521, 61.1476, 2088739.16, 5662.7798, 15.0789, 14.0789, 14.8137, 14.4797, 14.2439, 13.5374, 206.7236, 191.8431, 0.0409, 14.8805],
        [31, 129.649, 60.3104, 1950218.53, 5601.6321, 15.0423, 14.0423, 14.7764, 14.4428, 14.2081, 13.5022, 206.2029, 191.3597, 0.0432, 14.8432],
        [32, 121.342, 59.6752, 1820569.88, 5541.3217, 15.0036, 14.0036, 14.7370, 14.4037, 14.1702, 13.4650, 205.6520, 190.8482, 0.0457, 14.8037],
        [33, 113.564, 59.0909, 1699228.07, 5481.6465, 14.9627, 13.9627, 14.6954, 14.3624, 14.1302, 13.4257, 205.0694, 190.3074, 0.0483, 14.7620],
        [34, 106.281, 58.6403, 1585664.09, 5422.5556, 14.9195, 13.9195, 14.6513, 14.3187, 14.0878, 13.3841, 204.4534, 189.7355, 0.0510, 14.7179],
        [35, 99.463, 58.3833, 1479382.64, 5363.9153, 14.8738, 13.8738, 14.6048, 14.2725, 14.0431, 13.3402, 203.8023, 189.1311, 0.0539, 14.6712],
        [36, 93.078, 58.1855, 1379920.04, 5305.5320, 14.8255, 13.8255, 14.5556, 14.2237, 13.9958, 13.2937, 203.1145, 188.4926, 0.0570, 14.6220],
        [37, 87.099, 58.0235, 1286842.31, 5247.3466, 14.7744, 13.7744, 14.5036, 14.1722, 13.9458, 13.2447, 202.3882, 187.8182, 0.0602, 14.5699],
        [38, 81.501, 58.0321, 1199743.14, 5189.3230, 14.7206, 13.7206, 14.4488, 14.1178, 13.8931, 13.1929, 201.6211, 187.1061, 0.0637, 14.5150],
        [39, 76.259, 58.1656, 1118242.09, 5131.2910, 14.6637, 13.6637, 14.3909, 14.0604, 13.8374, 13.1382, 200.8116, 186.3546, 0.0673, 14.4570],
        [40, 71.350, 58.3177, 1041983.08, 5073.1253, 14.6038, 13.6038, 14.3298, 13.9998, 13.7787, 13.0806, 199.9578, 185.5619, 0.0711, 14.3959],
        [41, 66.754, 58.5948, 970632.82, 5014.8076, 14.5405, 13.5405, 14.2654, 13.9359, 13.7168, 13.0197, 199.0572, 184.7259, 0.0751, 14.3313],
        [42, 62.449, 58.8969, 903879.24, 4956.2128, 14.4739, 13.4739, 14.1976, 13.8686, 13.6515, 12.9556, 198.1080, 183.8446, 0.0794, 14.2634],
        [43, 58.418, 59.3674, 841430.23, 4897.3159, 14.4036, 13.4036, 14.1260, 13.7977, 13.5827, 12.8881, 197.1077, 182.9160, 0.0838, 14.1917],
        [44, 54.643, 59.8515, 783012.29, 4837.9484, 14.3297, 13.3297, 14.0507, 13.7229, 13.5103, 12.8170, 196.0543, 181.9380, 0.0885, 14.1162],
        [45, 51.107, 60.4231, 728369.50, 4778.0969, 14.2518, 13.2518, 13.9714, 13.6443, 13.4340, 12.7421, 194.9452, 180.9084, 0.0935, 14.0368],
        [46, 47.796, 61.0897, 677262.20, 4717.6738, 14.1698, 13.1698, 13.8879, 13.5615, 13.3538, 12.6633, 193.7782, 179.8250, 0.0987, 13.9532],
        [47, 44.695, 61.7684, 629466.10, 4656.5841, 14.0836, 13.0836, 13.8002, 13.4745, 13.2694, 12.5804, 192.5510, 178.6857, 0.1042, 13.8653],
        [48, 41.790, 62.5529, 584771.24, 4594.8157, 13.9930, 12.9930, 13.7079, 13.3830, 13.1807, 12.4933, 191.2607, 177.4878, 0.1099, 13.7729],
        [49, 39.070, 63.3992, 542981.04, 4532.2628, 13.8978, 12.8978, 13.6109, 13.2868, 13.0874, 12.4018, 189.9050, 176.2292, 0.1160, 13.6758],
        [50, 36.521, 64.3051, 503911.53, 4468.8635, 13.7978, 12.7978, 13.5091, 13.1858, 12.9896, 12.3056, 188.4813, 174.9075, 0.1224, 13.5738],
        [51, 34.134, 65.2655, 467390.50, 4404.5585, 13.6929, 12.6929, 13.4023, 13.0798, 12.8868, 12.2047, 186.9872, 173.5204, 0.1290, 13.4668],
        [52, 31.897, 66.2736, 433256.77, 4339.2929, 13.5829, 12.5829, 13.2902, 12.9687, 12.7790, 12.0989, 185.4198, 172.0653, 0.1360, 13.3545],
        [53, 29.802, 67.3207, 401359.43, 4273.0193, 13.4675, 12.4675, 13.1727, 12.8521, 12.6660, 11.9879, 183.7765, 170.5397, 0.1434, 13.2368],
        [54, 27.839, 68.4243, 371557.25, 4205.6986, 13.3465, 12.3465, 13.0496, 12.7300, 12.5476, 11.8717, 182.0546, 168.9411, 0.1511, 13.1135],
        [55, 26.000, 68.9638, 343718.01, 4137.2743, 13.2199, 12.2199, 12.9206, 12.6021, 12.4236, 11.7499, 180.2513, 167.2670, 0.1591, 12.9843],
        [56, 24.277, 69.6537, 317717.96, 4068.3104, 13.0870, 12.0870, 12.7853, 12.4679, 12.2936, 11.6221, 178.3594, 165.5106, 0.1676, 12.8488],
        [57, 22.663, 70.5075, 293440.65, 3998.6567, 12.9477, 11.9477, 12.6435, 12.3272, 12.1572, 11.4882, 176.3759, 163.6692, 0.1764, 12.7067],
        [58, 21.151, 71.5505, 270777.20, 3928.1492, 12.8019, 11.8019, 12.4949, 12.1799, 12.0143, 11.3479, 174.2984, 161.7405, 0.1857, 12.5579],
        [59, 19.734, 72.7378, 249625.80, 3856.5988, 12.6492, 11.6492, 12.3395, 12.0257, 11.8649, 11.2012, 172.1249, 159.7227, 0.1954, 12.4022],
        [60, 18.406, 74.1017, 229891.32, 3783.8610, 12.4897, 11.4897, 12.1770, 11.8646, 11.7086, 11.0478, 169.8531, 157.6136, 0.2056, 12.2395],
        [61, 17.162, 75.5929, 211484.82, 3709.7592, 12.3231, 11.3231, 12.0074, 11.6964, 11.5456, 10.8876, 167.4814, 155.4118, 0.2162, 12.0696],
        [62, 15.994, 77.2471, 194323.21, 3634.1664, 12.1494, 11.1494, 11.8305, 11.5209, 11.3755, 10.7206, 165.0079, 153.1155, 0.2272, 11.8924],
        [63, 14.900, 79.0409, 178328.78, 3556.9192, 11.9685, 10.9685, 11.6463, 11.3382, 11.1983, 10.5466, 162.4316, 150.7237, 0.2387, 11.7079],
        [64, 13.873, 80.9639, 163428.95, 3477.8783, 11.7803, 10.7803, 11.4546, 11.1481, 11.0141, 10.3657, 159.7516, 148.2357, 0.2507, 11.5159],
        [65, 12.910, 83.0021, 149555.89, 3396.9144, 11.5848, 10.5848, 11.2555, 10.9506, 10.8226, 10.1777, 156.9674, 145.6509, 0.2631, 11.3165],
        [66, 12.006, 85.1632, 136646.22, 3313.9123, 11.3819, 10.3819, 11.0489, 10.7458, 10.6240, 9.9826, 154.0788, 142.9692, 0.2760, 11.1096],
        [67, 11.157, 87.4241, 124640.69, 3228.7491, 11.1718, 10.1718, 10.8349, 10.5335, 10.4182, 9.7806, 151.0863, 140.1910, 0.2894, 10.8952],
        [68, 10.360, 89.7825, 113483.95, 3141.3251, 10.9544, 9.9544, 10.6136, 10.3139, 10.2054, 9.5715, 147.9907, 137.3172, 0.3032, 10.6735],
        [69, 9.611, 92.2106, 103124.28, 3051.5426, 10.7299, 9.7299, 10.3849, 10.0872, 9.9855, 9.3557, 144.7936, 134.3491, 0.3175, 10.4445],
        [70, 8.907, 94.7005, 93513.34, 2959.3320, 10.4984, 9.4984, 10.1492, 9.8534, 9.7588, 9.1331, 141.4969, 131.2885, 0.3322, 10.2083],
        [71, 8.246, 97.2318, 84605.93, 2864.6315, 10.2601, 9.2601, 9.9065, 9.6127, 9.5255, 8.9039, 138.1034, 128.1381, 0.3474, 9.9653],
        [72, 7.624, 99.7840, 76359.80, 2767.3998, 10.0152, 9.0152, 9.6571, 9.3653, 9.2857, 8.6685, 134.6163, 124.9008, 0.3630, 9.7155],
        [73, 7.040, 102.3211, 68735.40, 2667.6158, 9.7640, 8.7640, 9.4014, 9.1117, 9.0398, 8.4270, 131.0399, 121.5806, 0.3789, 9.4593],
        [74, 6.490, 104.8190, 61695.75, 2565.2947, 9.5069, 8.5069, 9.1396, 8.8520, 8.7880, 8.1797, 127.3786, 118.1815, 0.3953, 9.1971],
        [75, 5.972, 107.2422, 55206.19, 2460.4758, 9.2442, 8.2442, 8.8720, 8.5867, 8.5308, 7.9271, 123.6379, 114.7087, 0.4120, 8.9291],
        [76, 5.485, 109.5546, 49234.23, 2353.2336, 8.9764, 7.9764, 8.5993, 8.3161, 8.2685, 7.6696, 119.8237, 111.1678, 0.4290, 8.6559],
        [77, 5.026, 111.7151, 43749.37, 2243.6790, 8.7039, 7.7039, 8.3218, 8.0409, 8.0017, 7.4076, 115.9430, 107.5650, 0.4464, 8.3779],
        [78, 4.595, 113.6748, 38722.93, 2131.9639, 8.4272, 7.4272, 8.0400, 7.7615, 7.7308, 7.1415, 112.0031, 103.9074, 0.4640, 8.0957],
        [79, 4.189, 115.3759, 34127.93, 2018.2890, 8.1469, 7.1469, 7.7546, 7.4784, 7.4564, 6.8720, 108.0123, 100.2024, 0.4818, 7.8099],
        [80, 3.807, 116.7615, 29938.88, 1902.9132, 7.8637, 6.8637, 7.4662, 7.1923, 7.1790, 6.5997, 103.9790, 96.4581, 0.4998, 7.5210],
        [81, 3.448, 117.7735, 26131.65, 1786.1516, 7.5781, 6.5781, 7.1754, 6.9039, 6.8994, 6.3251, 99.9125, 92.6828, 0.5180, 7.2297],
        [82, 3.111, 118.3469, 22683.35, 1668.3781, 7.2909, 6.2909, 6.8829, 6.6138, 6.6182, 6.0489, 95.8222, 88.8855, 0.5363, 6.9367],
        [83, 2.795, 118.4068, 19572.16, 1550.0313, 7.0027, 6.0027, 6.5894, 6.3227, 6.3360, 5.7718, 91.7182, 85.0754, 0.5546, 6.6427],
        [84, 2.499, 117.8979, 16777.21, 1431.6244, 6.7142, 5.7142, 6.2956, 6.0313, 6.0535, 5.4944, 87.6101, 81.2616, 0.5729, 6.3485],
        [85, 2.222, 116.7429, 14278.44, 1313.7266, 6.4261, 5.4261, 6.0023, 5.7404, 5.7714, 5.2174, 83.5082, 77.4536, 0.5913, 6.0547],
        [86, 1.964, 114.8830, 12056.51, 1196.9837, 6.1392, 5.1392, 5.7101, 5.4506, 5.4905, 4.9415, 79.4221, 73.6601, 0.6095, 5.7620],
        [87, 1.724, 112.2672, 10092.65, 1082.1007, 5.8540, 4.8540, 5.4197, 5.1625, 5.2112, 4.6673, 75.3609, 69.8898, 0.6276, 5.4711],
        [88, 1.502, 108.8535, 8368.59, 969.8334, 5.5711, 4.5711, 5.1316, 4.8769, 4.9342, 4.3953, 71.3330, 66.1505, 0.6456, 5.1826],
        [89, 1.298, 104.6155, 6866.46, 860.9799, 5.2911, 4.2911, 4.8465, 4.5940, 4.6601, 4.1261, 67.3455, 62.4486, 0.6634, 4.8969],
        [90, 1.111, 99.5511, 5568.72, 756.3644, 5.0143, 4.0143, 4.5645, 4.3144, 4.3890, 3.8599, 63.4034, 58.7888, 0.6811, 4.6146],
        [91, 940, 93.9834, 4458.15, 656.8134, 4.7408, 3.7408, 4.2860, 4.0382, 4.1212, 3.5969, 59.5088, 55.1732, 0.6985, 4.3356],
        [92, 787, 87.9855, 3517.77, 562.8300, 4.4722, 3.4722, 4.0125, 3.7669, 3.8582, 3.3387, 55.6843, 51.6226, 0.7155, 4.0617],
        [93, 649, 81.3265, 2731.18, 474.8445, 4.2111, 3.2111, 3.7466, 3.5032, 3.6025, 3.0876, 51.9662, 48.1709, 0.7321, 3.7953],
        [94, 526, 73.9246, 2082.62, 393.5180, 3.9595, 2.9595, 3.4904, 3.2490, 3.3561, 2.8456, 48.3826, 44.8440, 0.7482, 3.5386],
        [95, 419, 65.8525, 1556.63, 319.5934, 3.7186, 2.7186, 3.2451, 3.0058, 3.1203, 2.6141, 44.9530, 41.6601, 0.7635, 3.2930],
        [96, 326, 57.3000, 1138.03, 253.7409, 3.4895, 2.4895, 3.0118, 2.7744, 2.8960, 2.3938, 41.6907, 38.6314, 0.7780, 3.0593],
        [97, 248, 48.5496, 811.90, 196.4409, 3.2727, 2.2727, 2.7910, 2.5554, 2.6837, 2.1853, 38.6031, 35.7650, 0.7918, 2.8381],
        [98, 184, 39.9334, 563.82, 147.8913, 3.0683, 2.0683, 2.5829, 2.3490, 2.4836, 1.9888, 35.6929, 33.0632, 0.8048, 2.6297],
        [99, 132, 31.7847, 380.06, 107.9578, 2.8764, 1.8764, 2.3874, 2.1551, 2.2956, 1.8042, 32.9596, 30.5257, 0.8170, 2.4339],
        [100, 92, 24.4022, 247.93, 76.1732, 2.6966, 1.6966, 2.2043, 1.9735, 2.1195, 1.6313, 30.3990, 28.1485, 0.8285, 2.2505],
        [101, 62, 18.0070, 155.99, 51.7709, 2.5284, 1.5284, 2.0331, 1.8037, 1.9549, 1.4697, 28.0051, 25.9261, 0.8392, 2.0790],
        [102, 40, 12.7218, 94.29, 33.7639, 2.3715, 1.3715, 1.8733, 1.6452, 1.8012, 1.3187, 25.7699, 23.8510, 0.8492, 1.9189],
        [103, 25, 8.5706, 54.53, 21.0421, 2.2248, 1.2248, 1.7240, 1.4971, 1.6577, 1.1777, 23.6817, 21.9124, 0.8585, 1.7693],
        [104, 14, 5.4792, 30.02, 12.4716, 2.0876, 1.0876, 1.5842, 1.3585, 1.5233, 1.0457, 21.7271, 20.0978, 0.8672, 1.6293],
        [105, 8, 3.3057, 15.64, 6.9923, 1.9582, 0.9582, 1.4524, 1.2278, 1.3966, 0.9214, 19.8850, 18.3876, 0.8754, 1.4974],
        [106, 4, 1.8714, 7.65, 3.6866, 1.8338, 0.8338, 1.3258, 1.1022, 1.2748, 0.8018, 18.1140, 16.7435, 0.8834, 1.3705],
        [107, 2, 0.9874, 3.48, 1.8152, 1.7088, 0.7088, 1.1984, 0.9759, 1.1523, 0.6815, 16.3329, 15.0899, 0.8913, 1.2429],
        [108, 1, 0.4801, 1.44, 0.8278, 1.5696, 0.5696, 1.0568, 0.8353, 1.0161, 0.5477, 14.3517, 13.2507, 0.9002, 1.1010],
        [109, 0, 0.2139, 0.52, 0.3477, 1.3749, 0.3749, 0.8585, 0.6387, 0.8255, 0.3605, 11.5791, 10.6767, 0.9125, 0.9024],
        [110, 0, 0.1338, 0.14, 0.1338, 1.0000, 0.0000, 0.4767, 0.2600, 0.4583, 0.0000, 6.2400, 5.7200, 0.9364, 0.5200]
    ];





    public $AD;

    public function getAD($F, $H, $J)
    {
        if (!($J instanceof Carbon)) {
            $J = Carbon::parse($J);
        }

        // Inicializar la variable de resultado
        $result = null;

        // Verificar si $H es igual a 3
        if ($H == 3) {
            // Calcular los días a agregar según $F utilizando 365.25 días por año
            $daysPerYear = 365.25;
            $yearsToAdd = $F == 1 ? 62 : 57;
            $daysToAdd = $yearsToAdd * $daysPerYear;

            // Agregar los días a la fecha $J
            $result = $J->copy()->addDays($daysToAdd);

            // Ajustar el resultado al formato de fecha
            $result = $result->format('Y-m-d');

            // Actualizar el campo $AD con el resultado calculado

        }
        $this->AD = $result;
        return $result;
    }

    public $AE;

    public function getAE($J)
    {
        // Valores internos de la función
        $fechaCalculo = $this->fecha_calculo2;
        $diasAno = 365.25;

        // Convertir $J y $fechaCalculo a instancias de Carbon
        $fechaCalculo = Carbon::parse($fechaCalculo);
        $J = Carbon::parse($J);

        // Verificar si $J es una fecha válida
        if ($J->gt(Carbon::createFromDate(0, 1, 1))) {
            // Calcular la diferencia en días entre las dos fechas
            $diferenciaDias = $fechaCalculo->diffInDays($J) + 1; // Agregar 1 para ajustar el cálculo

            // Calcular el número de años utilizando 365.25 días por año
            $resultado = $diferenciaDias / $diasAno;

            // Redondear el resultado al entero más cercano y sumar 1 año
            $resultado = round($resultado);

            // Retornar el valor mínimo entre 15 y el resultado calculado
            $this->AE = max(15, $resultado);
            return max(15, $resultado);
        }

        // Si $J no es una fecha válida, retornar 0
        $this->AE = 0;
        return 0;
    }

    public $AF;

    public function getAF($G, $J)
    {
        $fecha_calculo = Carbon::parse($this->fecha_calculo2);
        $Dias_año = 365;

        // Asegurarse de que $J es una instancia de Carbon para poder manipular la fecha
        if (!($J instanceof Carbon)) {
            $J = Carbon::parse($J);
        }

        // Inicializar la variable de resultado
        $result = 0;

        // Verificar si $G es igual a 6
        if ($G == 6) {
            $days_difference = $fecha_calculo->diffInDays($J);
            $result = floor($days_difference / $Dias_año);
        }
        $this->AF = $result;
        return $result;
    }

    public $AG;

    public function getAG($H, $J)
    {
        $AD = $this->AD;
        $Dias_año = 365;

        // Asegurarse de que $J es una instancia de Carbon para poder manipular la fecha
        if (!($J instanceof Carbon)) {
            $J = Carbon::parse($J);
        }

        // Asegurarse de que $AD es una instancia de Carbon para poder manipular la fecha
        if (!($AD instanceof Carbon) && !is_null($AD)) {
            $AD = Carbon::parse($AD);
        }

        // Inicializar la variable de resultado
        $result = 0;

        // Verificar si $H es igual a 3
        if ($H == 3) {
            if (!is_null($AD)) {
                $days_difference = $AD->diffInDays($J);
                $result = floor($days_difference / $Dias_año);
            }
        }
        $this->AG = $result;
        return $result;
    }

    public $AH;

    public function getAH($L)
    {
        $fecha_calculo = Carbon::parse($this->fecha_calculo2);
        $Dias_año = 365.25;

        // Asegurarse de que $L es una instancia de Carbon para poder manipular la fecha
        if (!($L instanceof Carbon)) {
            $L = Carbon::parse($L);
        }

        // Inicializar la variable de resultado
        $result = 0;

        // Verificar si $L es mayor a 0
        if ($L->isAfter(Carbon::create(0))) {
            $days_difference = $fecha_calculo->diffInDays($L);
            $result = floor(($days_difference / $Dias_año) + 0.5);
        }
        $this->AH = $result;
        return $result;
    }

    public $AI;
    public function getAI($F, $H)
    {
        $AE = $this->AE;
        $AG = $this->AG;

        $maxValue = max($AE, $AG);

        // Función para buscar el valor en el array dado un número


        // Obtener el factor basado en F y H
        if ($H == 3) {
            if ($AG > 0) {
                $factor = $F == 1
                    ? $this->buscarValor($this->fac_hom, $maxValue) / $this->buscarValor($this->fac_hom, $AE)
                    : $this->buscarValor($this->fac_muj, $maxValue) / $this->buscarValor($this->fac_muj, $AE);


                $this->AI = round($factor, 4);
                return round($factor, 4);
            }
        }
        $this->AI = 0;
        return 0;
    }

    public function buscarValor($array, $numero)
    {
        foreach ($array as $fila) {
            if ($fila[0] == $numero) {
                return $fila[1]; // Ajusta el índice según la columna deseada
            }
        }
        return null; // Valor no encontrado
    }

    public $AJ;

    public function getAJ($F, $H, $AA)
    {
        $AD = $this->AD;
        $AE = $this->AE;
        $AG = $this->AG;
        $AH = $this->AH;
        $AA = intval($AA);
        if ($H == 3) {

            if ($AA > 0 && !empty($AD)) {
                $maxAEAG = max($AE, $AG);
                $diffAGAE = max(0, $AG - $AE);

                // Ajuste para la búsqueda en la columna correcta
                $columnaMax = $AH + $diffAGAE - 13; // Ajuste -13 en vez de -15
                $columnaAE = $AH - 13; // Ajuste -13 en vez de -15

                // Verificamos que las columnas sean válidas
                if ($columnaMax > 0 && $columnaAE > 0) {
                    if ($F == 1) {
                        $valor_max = $this->buscarEnDxy(intval($maxAEAG), intval($columnaMax));
                        $valor_AE = $this->buscarEnDxy(intval($AE), intval($columnaAE));
                    } else {
                        $valor_max = $this->buscarEnDxyHorizontal(intval($maxAEAG), intval($columnaMax));
                        $valor_AE = $this->buscarEnDxyHorizontal(intval($AE), intval($columnaAE));
                    }

                    // Evitamos división por cero
                    if ($valor_AE !== null && $valor_AE != 0) {
                        $this->AJ = round($valor_max / $valor_AE, 4);
                        return round($valor_max / $valor_AE, 4);
                    } else {
                        $this->AJ = 0;
                        return 0;
                    }
                }
            }
        }
        $this->AJ = 0;
        return 0;
    }

    private function buscarEnDxy($valor, $columna)
    {
        // Convierte el número de columna a letras
        $column = 'dxy_' . $this->numeroACadenaColumna($columna);
        return Dxy::where('dxy_a', $valor)->value($column);
    }


    private function buscarEnDxyHorizontal($valor, $columna)
    {
        $column = 'dxy_' . $this->numeroACadenaColumna($columna);
        return Dxy::where($column, $valor)->value('dxy_a');
    }

    function numeroACadenaColumna($numero)
    {
        $letras = '';
        while ($numero > 0) {
            $numero--;
            $letras = chr($numero % 26 + 65) . $letras;
            $numero = intdiv($numero, 26);
        }
        return strtolower($letras); // Devuelve en minúsculas
    }

    public $AK;
    public function getAK($F, $H, $AA)
    {
        // Convertimos AA a un número entero
        $AA = intval($AA);

        // Asumimos que $AD, $AG, $AI y $parametrosd17 ya están definidos en la clase
        $AD = $this->AD;
        $AG = intval($this->AG);
        $AI = $this->AI;
        $parametrosd17 = $this->parametrosd17;

        // Verificamos la condición inicial
        if ($AA > 0 && !empty($AD)) {
            // Verificamos si H es igual a 3
            if ($H == 3) {
                // Seleccionamos el array correcto basado en F
                $arraySeleccionado = ($F == 1) ? $this->fac_hom : $this->fac_muj;

                // Buscamos el valor en la columna 13 del array seleccionado
                $valorBuscado = $this->buscarV($AG, $arraySeleccionado, 13);

                // Si se encuentra el valor, realizamos la operación
                if ($valorBuscado !== null) {
                    $this->AK = intval($valorBuscado * $AI * $AA * (1 + $parametrosd17));
                    return intval($valorBuscado * $AI * $AA * (1 + $parametrosd17));
                }
            }
        }

        // Si alguna condición no se cumple, devolvemos 0
        $this->AK = 0;
        return 0;
    }

    private function buscarV($valor, $array, $columna)
    {
        foreach ($array as $fila) {
            if ($fila[0] == $valor) {
                return $fila[$columna - 1];
            }
        }
        return null;
    }

    public $AL;

    public function getAL($F, $W, $AA)
    {
        // Definimos las variables locales
        $AD = $this->AD;
        $AG = intval($this->AG);
        $AI = $this->AI;
        $parametros17 = $this->parametrosd17;
        $AA = intval($AA);

        // Verificamos la condición inicial
        if ($AA > 0 && !empty($AD) && $W == 14) {
            // Seleccionamos el array correcto basado en F
            $arraySeleccionado = ($F == 1) ? $this->fac_hom : $this->fac_muj;

            // Buscamos el valor en la columna 15 del array seleccionado
            $valorBuscado = $this->buscarV($AG, $arraySeleccionado, 15);

            // Si se encuentra el valor, realizamos la operación
            if ($valorBuscado !== null) {
                $this->AL = $valorBuscado * $AI * $AA * (1 + $parametros17);
                return $valorBuscado * $AI * $AA * (1 + $parametros17);
            }
        }

        // Si alguna condición no se cumple o ocurre un error, devolvemos 0
        $this->AL = 0;
        return 0;
    }

    public $AM;
    public function getAM($F, $G, $H, $AA)
    {
        $AA = intval($AA);
        $AD = $this->AD;
        $AE = intval($this->AE);
        $smmlv = $this->smmlv;

        // Verificar las condiciones iniciales
        if ($AA > 0 && !empty($AD)) {
            // Verificar las condiciones adicionales
            if (($G != 4 && $G != 5) && ($H == 2 || $H == 3)) {
                // Seleccionar el array correcto basado en F
                $arraySeleccionado = ($F == 1) ? $this->fac_hom : $this->fac_muj;

                // Buscar el valor en la columna 14 del array seleccionado
                $valorBuscado = $this->buscarV($AE, $arraySeleccionado, 14);

                // Calcular el valor del SMMLV
                $valorSMMLV = max($smmlv * 5, min($smmlv * 10, $AA));

                // Si se encuentra el valor, realizar la operación
                if ($valorBuscado !== null) {
                    $this->AM = $valorBuscado * $valorSMMLV;
                    return $valorBuscado * $valorSMMLV;
                }
            }
        }

        // Si alguna condición no se cumple o ocurre un error, devolver 0
        $this->AM = 0;
        return 0;
    }

    public $AN;
    public function getAN($F, $G, $K, $W)
    {
        $AD = $this->AD;
        $AE = intval($this->AE);
        $AH = intval($this->AH);

        if ($W > 0 && $AD > 0) {
            if ($G == 4 || $G == 5) {
                return 0;
            }

            // Selección del array correcto basado en F
            $arraySeleccionado = ($F == 1) ? $this->fac_muj : $this->fac_hom;

            // Buscar el valor en la columna 7 del array seleccionado
            $valorBuscado = $this->buscarV($AH, $arraySeleccionado, 7);

            // Ajuste de columna para la búsqueda en Axy
            $columnaAjustada = $AH - 13; // Ajuste -13

            if ($F == 1) {
                if ($K == 1) {
                    $valorK = $this->buscarEnAxy($AE, $columnaAjustada);
                } else {
                    $valorK = $this->buscarEnAxyHiMv($AE, $columnaAjustada);
                }
            } else {
                if ($K == 1) {
                    $valorK = $this->buscarEnAxy($AE, $columnaAjustada);
                } else {
                    $valorK = $this->buscarEnAxyHvMi($AE, $columnaAjustada);
                }
            }

            // Calcular el resultado final
            if ($valorBuscado !== null && $valorK !== null) {
                $this->AN = round($valorBuscado - $valorK, 4);
                return round($valorBuscado - $valorK, 5);
            }
        }
        $this->AN = 0;
        return 0;
    }

    private function buscarEnAxy($valor, $columna)
    {
        $column = 'axy_' . $this->numeroACadenaColumna($columna);
        return Axy::where('axy_a', $valor)->value($column);
    }

    private function buscarEnAxyHiMv($valor, $columna)
    {
        $column = 'axy_hi_mv_' . $this->numeroACadenaColumna($columna);
        return Axy_hi_mv::where('axy_hi_mv_a', $valor)->value($column);
    }

    private function buscarEnAxyHvMi($valor, $columna)
    {
        $column = 'axy_hv_mi_' . $this->numeroACadenaColumna($columna);
        return Axy_hv_mi::where('axy_hv_mi_a', $valor)->value($column);
    }

    public $AO;
    public function getAO($H, $AA)
    {
        $AJ = $this->AJ; // 1
        $AN = $this->AN; // 3.15653
        $parametros17 = $this->parametrosd17; // Por ejemplo, 0.05 para 5%
        $AA = intval($AA); // 2342057

        // Convertir el porcentaje K_ a decimal
        $K_ = 0.04; // 4%

        // Condición inicial
        $condicionInicial = ($H == 3) ? 1 : 0;

        // Calcular el factor multiplicador
        $factorMultiplicador = 12 * (1 + (11 / 24) * $K_) + 1;

        // Calcular el resultado final
        $resultado = $condicionInicial * $factorMultiplicador * $AA * $AN * (1 + $parametros17) * $AJ;

        $this->AO = $resultado;
        return $resultado;
    }

    public $AP;
    public function getAP()
    {
        // Valores de ejemplo (ajustar según la realidad de tu aplicación)
        $K_ = $this->K_; // Por ejemplo, 0.04 (4%)
        $AN = $this->AN; // Por ejemplo, 3.15653

        // Cálculo de acuerdo con la fórmula
        $resultado = (1 + (1 / 4) * $K_) * $AN * 2 - $AN;
        $this->AP = $resultado;
        return $resultado;
    }

    public $AQ;
    public function getAQ($G, $W, $AA)
    {
        $AA = intval($AA);
        $AJ = $this->AJ;
        $AP = $this->AP;
        $parametros17 = $this->parametrosd17;

        // Verificar la condición
        $condicion = ($G == 4 || $G == 5 || $W == 13) ? 0 : 1;

        // Calcular el resultado
        $resultado = $condicion * $AA * $AP * (1 + $parametros17) * $AJ;
        $this->AQ = $resultado;
        return $resultado;
    }

    public $AR;
    public function getAR()
    {
        $AO = $this->AO;
        $AK = $this->AK;

        $resultado = $AK + $AO;
        $this->AR = intval($resultado);
        return intval($resultado);
    }

    public $AS;
    public function getAS()
    {
        $AL = $this->AL;
        $AQ = $this->AQ;

        $resultado = $AL + $AQ;
        $this->AS = $resultado;
        return $resultado;
    }

    public $AT;
    public function getAT()
    {
        $this->AT = $this->AM;
        return $this->AT;
    }

    public $AU;
    public function getAU($G, $J)
    {
        if ($G != 6) {
            $this->AU = "Inmediata";
            return "Inmediata";
        } else {
            if (is_string($J)) {
                $J = new DateTime($J);
            }

            $daysToAdd = 55 * 365.25;
            $J->modify("+{$daysToAdd} days");

            $this->AU = $J->format('Y-m-d');
            return $J->format('Y-m-d');
        }
    }

    public $AV;
    public function getAV($F, $G, $J)
    {
        if ($G <= 4) {
            $this->AV = "Vitalicia";
            return "Vitalicia";
        } elseif ($J > 0) {
            // Convertir $J a un objeto DateTime si es necesario
            if (is_string($J)) {
                $J = new DateTime($J);
            }

            if ($G == 5) {
                // Añadir 25 años (365.25 días por año)
                $daysToAdd = 25 * 365.25;
                $J->modify("+{$daysToAdd} days");
            } else {
                // Añadir años según el valor de $F (365.25 días por año)
                $yearsToAdd = ($F == 1) ? 62 : 57;
                $daysToAdd = $yearsToAdd * 365.25;
                $J->modify("+{$daysToAdd} days");
            }

            // Devolver la fecha modificada en formato adecuado
            $this->AV = $J->format('Y-m-d');
            return $J->format('Y-m-d');
        }
        $this->AV = '';
        return null; // Retornar null si ninguna condición se cumple
    }

    public $AW;
    public function getAW()
    {
        $AE = intval($this->AE); // Convertir $AE a un número entero si no lo es

        // Calcular el valor de 15 - $AE
        $result = 15 - $AE;

        // Devolver el máximo entre 0 y el resultado
        $this->AW = max(0, $result);
        return max(0, $result);
    }

    public $AX;
    public function getAX()
    {
        $AW = $this->AW;
        $j = $this->j;
        $js = $this->js;
        $jm = $this->jm;

        // Check if AW is greater than 0
        if ($AW > 0) {
            // Calculate the expression (j/jm + j/js)
            $result = ($jm != 0 && $js != 0) ? ($j / $jm) + ($j / $js) : 0;
        } else {
            // If AW is not greater than 0, return 0
            $result = 0;
        }
        $this->AX = $result;
        return $result;
    }

    public $AY;
    public function getAY()
    {
        $AW = $this->AW;
        $i = $this->i;

        // Ensure i is not zero to avoid division by zero
        if ($i != 0) {
            // Calculate the formula (1 - (1 + i)^-AW) / i
            $result = (1 - pow((1 + $i), -$AW)) / $i;
        } else {
            // Handle the case where i is zero to avoid division by zero
            $result = 0;
        }
        $this->AY = $result;
        return $result;
    }

    public $AZ;
    public function getAZ($F)
    {
        $AE = intval($this->AE); // Should be 62
        $F = intval($F); // Should be 1
        $arraySeleccionado = ($F == 1) ? $this->fac_hom : $this->fac_muj;

        // Buscar el valor 25 en la columna 2 del array seleccionado
        $valor25 = $this->buscarV(25, $arraySeleccionado, 2);

        // Buscar el valor máximo entre 15 y AE en la columna 2 del array seleccionado
        $valorMaxAE = $this->buscarV(max(15, $AE), $arraySeleccionado, 2);
        // Calcular el resultado
        if ($valorMaxAE != 0) {
            $resultado = $valor25 / $valorMaxAE;
        } else {
            $resultado = 0;
        }
        $this->AZ = round($resultado, 5);
        return round($resultado, 5);
    }

    public $BA;
    public function getBA($F)
    {
        $AE = $this->AE;
        $AF = $this->AF;

        // Check if AF is greater than 0
        if ($AF > 0) {
            // Determine which array to use based on $F
            $arraySeleccionado = ($F == 1) ? $this->fac_hom : $this->fac_muj;

            // Find the maximum value between AE and AF
            $valorMax = max($AE, $AF);

            // Perform lookups in the selected array
            $valorMaxAE = $this->buscarV($valorMax, $arraySeleccionado, 2);
            $valorAE = $this->buscarV($AE, $arraySeleccionado, 2);

            // Avoid division by zero
            if ($valorAE != 0) {
                $resultado = $valorMaxAE / $valorAE;
            } else {
                $resultado = 0; // Return 0 if the denominator is zero
            }
        } else {
            $resultado = 1; // Return 1 if AF is not greater than 0
        }
        $this->BA = $resultado;
        return $resultado;
    }

    public $BB;
    public function getBB($F, $K, $R, $S, $V)
    {
        $AE = intval($this->AE);
        $AF = intval($this->AF);
        $BA = $this->BA;

        // Verifica si la suma de R y S es cero
        if (($R + $S) == 0) {
            return 0;
        }

        // Determina el modelo a usar basado en $F
        if ($F == 1) {
            $arraySeleccionado = $this->fac_hom;
            $modelo = ($V == 14) ? 'Fach_inv' : 'Facm_inv';
        } else {
            $arraySeleccionado = $this->fac_muj;
            $modelo = ($V == 14) ? 'Fach_inv' : 'Facm_inv';
        }

        // Realiza la búsqueda en el array/modelo seleccionado
        $columna = ($V == 14) ? 12 : 13;
        $valorMax = $this->buscarV(max($AE, $AF), $arraySeleccionado, $columna);

        // Realiza la búsqueda en el modelo de base de datos
        $valorMaxDB = ($modelo == 'Fach_inv') ? $this->buscarEnFachInv(max($AE, $AF), $columna) : $this->buscarEnFacmInv(max($AE, $AF), $columna);

        // Evita la división por cero
        if ($valorMaxDB != 0) {
            $resultado = $valorMax * $BA * ($R + $S);
        } else {
            $resultado = 0; // Retorna 0 si el divisor es 0
        }
        $this->BB = intval($resultado);
        return intval($resultado);
    }

    private function buscarEnFachInv($valor, $columna)
    {
        // Convierte el número de columna a letras
        $columnaNombre = $this->numeroACadenaColumna($columna);
        return Fach_inv::where("Fach_inv_a", $valor)->value("Fach_inv_{$columnaNombre}");
    }

    private function buscarEnFacmInv($valor, $columna)
    {
        // Convierte el número de columna a letras
        $columnaNombre = $this->numeroACadenaColumna($columna);

        // Busca el valor en el modelo Facm_inv
        return Facm_inv::where("Facm_inv_a", $valor)->value("Facm_inv_{$columnaNombre}");
    }

    public $BC;
    public function getBC($F, $K, $AB)
    {
        $AE = intval($this->AE); // Valor de AE
        $AF = intval($this->AF); // Valor de AF
        $AB = floatval($AB);     // Valor de AB
        $BA = $this->BA;         // Valor de BA

        // Determina cuál tabla usar basándote en el valor de $F
        $tabla = ($F == 1) ? ($K == 1 ? $this->fac_hom : $this->fac_muj) : ($K == 1 ? $this->fac_hom : $this->fac_muj);

        // Realiza la búsqueda en la tabla seleccionada
        $valorBusqueda = $this->buscarV(max($AE, $AF), $tabla, 15);

        // Calcula el resultado final
        $resultado = $valorBusqueda * $AB * $BA;
        $this->BC = intval($resultado);
        return intval($resultado);
    }

    public $BD;
    public function getBD($F, $K, $U)
    {
        $AE = intval($this->AE); // Valor de AE
        $AF = intval($this->AF); // Valor de AF
        $BA = $this->BA;         // Valor de BA
        $U = floatval($U);       // Valor de U

        // Determina cuál tabla/modelo usar basándote en el valor de $F
        if ($F == 1) {
            // Si $F es 1, usa fac_hom o fac_muj
            $tabla = ($K == 1) ? $this->fac_hom : $this->fac_muj;
            // Realiza la búsqueda en el array seleccionado
            $valorBusqueda = $this->buscarV(max($AE, $AF), $tabla, 7);
        } else {
            // Si $F no es 1, usa fach_inv o facm_inv
            $valorBusqueda = ($K == 1) ?
                $this->buscarEnFachInv(max($AE, $AF), 7) :
                $this->buscarEnFacmInv(max($AE, $AF), 7);
        }

        // Calcula el resultado final
        $resultado = $valorBusqueda * $U * $BA;
        $this->BD = $resultado;
        return $resultado;
    }

    public $BE;
    public function getBE($F, $K, $T, $V)
    {
        $AE = intval($this->AE); // Valor de AE
        $AF = intval($this->AF); // Valor de AF
        $BA = $this->BA;         // Valor de BA
        $T = floatval($T);       // Valor de T
        $V = intval($V);         // Valor de V

        // Verifica si T es 0
        if ($T == 0) {
            return 0;
        }

        // Determina cuál tabla/modelo usar basado en $F
        if ($F == 1) {
            // Si $F es 1, usa fac_hom o Fac_muj
            $tabla = ($K == 1) ? $this->fac_hom : $this->fac_muj;
        } else {
            // Si $F no es 1, usa Fach_inv o Facm_inv
            $modelo = ($K == 1) ? 'Fach_inv' : 'Facm_inv';
            $columna = ($V == 14) ? 12 : 13;

            // Realiza la búsqueda en el modelo seleccionado
            $valorBusqueda = ($modelo == 'Fach_inv')
                ? $this->buscarEnFachInv(max($AE, $AF), $columna)
                : $this->buscarEnFacmInv(max($AE, $AF), $columna);
        }

        if ($F == 1) {
            // Realiza la búsqueda en el array seleccionado
            $columna = ($V == 14) ? 12 : 13;
            $valorBusqueda = $this->buscarV(max($AE, $AF), $tabla, $columna);
        }

        // Calcula el resultado final
        $resultado = $valorBusqueda * $BA * $T;
        $this->BE = $resultado;
        return $resultado;
    }

    public $BF;
    public function getBF($F, $G, $H, $K, $R, $Y)
    {
        $AE = intval($this->AE); // Valor de AE
        $Y = floatval($Y);       // Valor de Y

        // Verifica si R es 0
        if ($R == 0) {
            $this->BF = 0;
            return 0;
        }

        // Verifica si G es 4, G es 5 o H es 2
        if (in_array($G, [4, 5]) || $H == 2) {
            $this->BF = 0;
            return 0;
        }

        // Determina qué array/modelo usar basado en el valor de $F
        if ($F == 1) {
            // Si $F es 1, usa fac_hom o Fac_Muj
            $tabla = ($K == 1) ? $this->fac_hom : $this->fac_muj;
        } else {
            // Si $F no es 1, usa Fach_inv o Facm_inv
            $modelo = ($K == 1) ? 'Fach_inv' : 'Facm_inv';
            $columna = 14;

            // Realiza la búsqueda en el modelo seleccionado
            $valorBusqueda = ($modelo == 'Fach_inv')
                ? $this->buscarEnFachInv($AE, $columna)
                : $this->buscarEnFacmInv($AE, $columna);
        }

        if ($F == 1) {
            // Realiza la búsqueda en el array seleccionado
            $valorBusqueda = $this->buscarV($AE, $tabla, 14);
        }

        // Calcula el resultado final
        $resultado = $valorBusqueda * $Y;
        $this->BF = $resultado;
        return $resultado;
    }

    public $BG;
    public function getBG($F, $K, $AC)
    {
        $AE = intval($this->AE); // Valor de AE
        $AF = intval($this->AF); // Valor de AF
        $BA = $this->BA;         // Valor de BA
        $AC = floatval($AC);    // Valor de AC

        // Determina qué array/modelo usar basado en el valor de $F y $K
        if ($K == 1) {
            // Si $K es 1, usa Fac_hom o Fac_Muj
            $tabla = ($F == 1) ? $this->fac_hom : $this->fac_muj;
        } else {
            // Si $K no es 1, usa Fach_inv o Facm_inv
            $modelo = ($F == 1) ? 'Fach_inv' : 'Facm_inv';
            $columna = 6;

            // Realiza la búsqueda en el modelo seleccionado
            $valorBusqueda = ($modelo == 'Fach_inv')
                ? $this->buscarEnFachInv(max($AE, $AF), $columna)
                : $this->buscarEnFacmInv(max($AE, $AF), $columna);
        }

        if ($K == 1) {
            // Realiza la búsqueda en el array seleccionado
            $valorBusqueda = $this->buscarV(max($AE, $AF), $tabla, 6);
        }

        // Calcula el resultado final
        $resultado = $valorBusqueda * $AC * $BA;
        $this->BG = $resultado;
        return $resultado;
    }

    public $BH;
    public function getBH($F, $G, $K)
    {
        $AE = intval($this->AE);   // Valor de AE
        $AH = intval($this->AH);   // Valor de AH

        // Verifica la condición basada en G
        if ($G == 4 || $G == 5) {
            return 0;
        }

        // Determina cuál tabla usar para la primera parte de la fórmula
        if ($F == 1) {
            $valorBusqueda = $this->buscarV($AH, $this->fac_muj, 7);
        } else {
            $valorBusqueda = $this->buscarV($AH, $this->fac_hom, 7);
        }

        // Determina cuál base de datos/modelo usar para la segunda parte de la fórmula
        if ($F == 1) {
            if ($K == 1) {
                $valorBusqueda2 = $this->buscarEnAxy($AE, $AH - 13);
            } else {
                $valorBusqueda2 = $this->buscarEnAxyHiMv($AE, $AH - 13);
            }
        } else {
            if ($K == 1) {
                $valorBusqueda2 = $this->buscarEnAxy($AE, $AH - 13);
            } else {
                $valorBusqueda2 = $this->buscarEnAxyHvMi($AE, $AH - 13);
            }
        }

        // Calcula el resultado final
        $resultado = $valorBusqueda - $valorBusqueda2;
        $this->BH = $resultado;
        return round($resultado, 5);
    }

    public $BJ;
    public function getBJ()
    {
        // Obtiene los valores necesarios
        $BH = $this->BH;
        $K_ = $this->K_;

        // Aplica la fórmula
        $resultado = ((1 + (1 / 4) * $K_) * $BH) * 2 - $BH;
        $this->BJ = $resultado;
        return $resultado;
    }

    public $BI;
    public function getBI($G, $R, $S)
    {
        $BH = $this->BH; // Valor de BH
        $BJ = $this->BJ; // Valor de BJ
        $K_ = $this->K_;      // Valor de K_

        // Verifica si G es 4 o 5
        if ($G == 4 || $G == 5) {
            return 0;
        }

        // Calcula la primera parte de la fórmula
        $parte1 = (12 * ((1 + (11 / 24) * $K_)) + 1) * $BH * ($R + $S);

        // Calcula la segunda parte de la fórmula
        $parte2 = ((1 + (11 / 24) * $K_)) * $BJ * ($R + $S);

        // Suma ambas partes
        $resultado = $parte1 + $parte2;
        $this->BI = $resultado;
        return intval($resultado);
    }

    public $BK;
    public function getBK($G, $AB)
    {
        $BJ = $this->BJ; // Valor de BJ
        $AB = floatval($AB); // Valor de AB

        // Calcula el resultado basado en G5
        if ($G == 4 || $G == 5) {
            $this->BK = 0;
            return 0;
        } else {
            $this->BK = intval($AB * $BJ);
            return intval($AB * $BJ);
        }
    }

    public $BL;
    public function getBL($G, $U)
    {
        $BJ = $this->BJ; // Valor de BJ
        $U = floatval($U); // Valor de U

        // Calcula el resultado basado en G5
        if ($G == 4 || $G == 5) {
            $this->BL = 0;
            return 0;
        } else {
            $this->BL = $U * $BJ;
            return $U * $BJ;
        }
    }

    public $BM;
    public function getBM($G, $T)
    {
        $BH = $this->BH;  // Valor de BH
        $K_ = $this->K_;       // Valor de K_ (4%)
        $T = floatval($T); // Valor de T

        // Calcula el resultado basado en G5
        if ($G == 4 || $G == 5) {
            $this->BM = 0;
            return 0;
        } else {
            $this->BM = 12 * (1 + (11 / 24) * $K_) * $BH * $T;
            return 12 * (1 + (11 / 24) * $K_) * $BH * $T;
        }
    }

    public $BN;

    public function getBN($G, $AC)
    {
        $BJ = $this->BJ;  // Valor de BJ
        $AC = floatval($AC); // Valor de AC

        // Calcula el resultado basado en G5
        if ($G == 4 || $G == 5) {
            $this->BN = 0;
            return 0;
        } else {
            $this->BN = $AC * $BJ;
            return $AC * $BJ;
        }
    }

    public $BO;
    public function getBO()
    {
        $BB = $this->BB;
        $BC = $this->BC;
        $BR = $this->BE;
        $BF = $this->BF;
        $BI = $this->BI;
        $BK = $this->BK;
        $BM = $this->BM;
        $resultado = $BB + $BC + $BR + $BF + $BI + $BK + $BM;
        $this->BO = $resultado;
        return $resultado;
    }

    public $BP;
    public function getBP()
    {
        // Obtén los valores necesarios
        $BB = $this->BB;  // Valor de BB
        $BE = $this->BE;  // Valor de BE
        $BI = $this->BI;  // Valor de BI
        $BM = $this->BM;  // Valor de BM

        // Calcula la suma de BB, BE, BI, y BM
        $suma = $BB + $BE + $BI + $BM;

        // Retorna el máximo entre la suma y 0
        $this->BP = max($suma, 0);
        return max($suma, 0);
    }

    public $BQ;
    public function getBQ()
    {
        $BC = $this->BC;
        $BK = $this->BK;
        $this->BQ = $BC + $BK;
        return $BC + $BK;
    }

    public $BR;
    public function getBR()
    {
        $BL = $this->BL;
        $BD = $this->BD;
        $this->BR = $BL + $BD;
        return $BL + $BD;
    }

    public $BS;
    public function getBS()
    {
        $BF = $this->BF;
        $this->BS = $BF;
        return $BF;
    }

    public $BT;
    public function getBT()
    {
        $BG = $this->BG;
        $BN = $this->BN;

        $resultado = $BG + $BN;
        $this->BT = $resultado;
        return $resultado;
    }

    public $BU;
    public function getBU()
    {
        $BP = $this->BP;
        $BQ = $this->BQ;
        $BR = $this->BR;
        $BS = $this->BS;

        $resultado = $BP + $BQ + $BR + $BS;

        return $resultado;
    }

    public $BV;
    public function getBV()
    {
        // Obtén los valores necesarios
        $AK = $this->AK;  // Valor de AK
        $AL = $this->AL;  // Valor de AL
        $BB = $this->BB;  // Valor de BB
        $BC = $this->BC;  // Valor de BC (no se utiliza en esta fórmula)
        $BD = $this->BD;  // Valor de BD (no se utiliza en esta fórmula)
        $BE = $this->BE;  // Valor de BE

        // Calcula la suma de BB, BC, BD y BE
        $sumaBB_BE = $BB + $BC + $BD + $BE;

        // Calcula la suma de AK y AL
        $sumaAK_AL = $AK + $AL;

        // Calcula el resultado final
        $resultado = $sumaBB_BE - $sumaAK_AL;

        // Retorna el máximo entre el resultado y 0
        $this->BV = max($resultado, 0);
        return max($resultado, 0);
    }

    public $BW;
    public function getBW()
    {
        // Obtén los valores necesarios
        $AO = $this->AO;  // Valor de AO
        $AQ = $this->AQ;  // Valor de AQ
        $BI = $this->BI;  // Valor de BI
        $BK = $this->BK;  // Valor de BK
        $BL = $this->BL;  // Valor de BL (no se utiliza en esta fórmula)
        $BM = $this->BM;  // Valor de BM

        // Calcula la suma de BI, BK y BM
        $sumaBI_BK_BM = $BI + $BK + $BM;

        // Calcula la suma de AO y AQ
        $sumaAO_AQ = $AO + $AQ;

        // Calcula el resultado final
        $resultado = $sumaBI_BK_BM - $sumaAO_AQ;

        // Retorna el máximo entre el resultado y 0
        $this->BW = max($resultado, 0);
        return max($resultado, 0);
    }

    public $BX;
    public function getBX()
    {
        // Obtén los valores necesarios
        $BS = $this->BS;  // Valor de BS
        $AT = $this->AT;  // Valor de AT

        // Calcula la diferencia
        $diferencia = $BS - $AT;

        // Retorna el máximo entre la diferencia y 0
        $this->BX = max($diferencia, 0);
        return max($diferencia, 0);
    }

    public $BY;
    public function getBY()
    {
        $BV = $this->BV;
        $BW = $this->BW;
        $BX = $this->BX;
        $this->BY = $BV + $BW + $BX;
        return $BV + $BW + $BX;
    }

    public $BZ;
    public function getBZ($H, $X)
    {

        // Verificar si $H es igual a 3
        if ($H == 3) {
            $this->BZ = $X;
            return $X; // Retorna $X si $H es igual a 3
        } else {
            $this->BZ = 0;
            return 0; // Retorna 0 si $H no es igual a 3
        }
    }

    public $BAZ;

    public function getBAZ($R)

    {
        $BZ = $this->BZ; // Por ejemplo, 20
        $SMMLV = $this->smmlv; // Salario mínimo legal, por ejemplo
        $TTM = $this->TTM; // Tasa técnica mensual

        if ($BZ > 0) {
            $percentage = 0.16;

            if ($R > 4 * $SMMLV) {
                $percentage += 0.01;
            }

            if ($R >= 16 * $SMMLV) {
                $additional_percentage = 0.002 * min(max(intval($R / $SMMLV - 15), 0), 5);
                $percentage += $additional_percentage;
            }

            $VA_value = intval(round($this->calculateVA($TTM, $BZ, 1)));
            $result = $R * $percentage * $VA_value;
        } else {
            $result = 0;
        }
        $this->BAZ = $result;
        return $result;
    }
    public $CG;

    public function getCG($Q, $R, $S, $T, $U, $V, $AB)
    {
        $resultado = ($R + $S) * $V + 0 * 12 + 0 + $AB + $Q * 0.16 * 12;

        $this->CG = $resultado;
        return $resultado;
    }




    public function getCA($R)
    {
        $BZ = $this->BZ; // Por ejemplo, 20
        $SMMLV = $this->smmlv; // Salario mínimo legal, por ejemplo
        $TTM = $this->TTM; // Tasa técnica mensual

        if ($BZ > 0) {
            $percentage = 0.16;

            if ($R > 4 * $SMMLV) {
                $percentage += 0.01;
            }

            if ($R >= 16 * $SMMLV) {
                $additional_percentage = 0.002 * min(max(intval($R / $SMMLV - 15), 0), 5);
                $percentage += $additional_percentage;
            }

            $VA_value = intval(round($this->calculateVA($TTM, $BZ, 1)));
            $result = $R * $percentage * $VA_value;
        } else {
            $result = 0;
        }

        return $result;
    }

    function calculateVA($rate, $nper, $pmt, $fv = 0, $type = 0)
    {
        if ($rate != 0) {
            return ($pmt * (1 - pow(1 + $rate, -$nper)) / $rate) + ($fv * pow(1 + $rate, -$nper));
        } else {
            return ($pmt * $nper) + $fv;
        }
    }

    public function updateState($id)
    {
        $studio = Study::find($id);
        $studio->update([
            'user_id' => auth()->user()->id,
            'studies_ad' => $this->AD,
            'studies_ae' => $this->AE,
            'studies_af' => $this->AF,
            'studies_ag' => $this->AG,
            'studies_ah' => $this->AH,
            'studies_ai' => $this->AI,
            'studies_aj' => $this->AJ,
            'studies_ak' => $this->AK,
            'studies_al' => $this->AL,
            'studies_am' => $this->AM,
            'studies_an' => $this->AN,
            'studies_ao' => $this->AO,
            'studies_ap' => $this->AP,
            'studies_aq' => $this->AQ,
            'studies_ar' => $this->AR,
            'studies_as' => $this->AS,
            'studies_at' => $this->AT,
            'studies_au' => $this->AU,
            'studies_av' => $this->AV,
            'studies_aw' => $this->AW,
            'studies_ax' => $this->AX,
            'studies_ay' => $this->AY,
            'studies_az' => $this->AZ,
            'studies_ba' => $this->BA,
            'studies_bb' => $this->BB,
            'studies_bc' => $this->BC,
            'studies_bd' => $this->BD,
            'studies_be' => $this->BE,
            'studies_bf' => $this->BF,
            'studies_bg' => $this->BG,
            'studies_bh' => $this->BH,
            'studies_bi' => $this->BI,
            'studies_bj' => $this->BJ,
            'studies_bk' => $this->BK,
            'studies_bl' => $this->BL,
            'studies_bm' => $this->BM,
            'studies_bn' => $this->BN,
            'studies_bo' => $this->BO,
            'studies_bp' => $this->BP,
            'studies_bq' => $this->BQ,
            'studies_br' => $this->BR,
            'studies_bs' => $this->BS,
            'studies_bt' => $this->BT,
            'studies_bu' => $this->BU,
            'studies_bv' => $this->BV,
            'studies_bw' => $this->BW,
            'studies_bx' => $this->BX,
            'studies_by' => $this->BY,
            'studies_bz' => $this->BZ,
            'studies_baz' => $this->BAZ,
            'studies_cg' => $this->CG,
        ]);
    }
}
